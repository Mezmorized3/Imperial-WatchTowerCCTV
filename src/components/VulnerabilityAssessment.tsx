
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { AlertTriangle, Shield, Check, X, ExternalLink, Play, ChevronDown, ChevronUp } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Separator } from '@/components/ui/separator';
import { CameraResult, VulnerabilityAssessmentResult } from '@/types/scanner';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';

interface VulnerabilityAssessmentProps {
  camera: CameraResult;
  onRunAssessment?: () => void;
}

const VulnerabilityAssessment: React.FC<VulnerabilityAssessmentProps> = ({ camera, onRunAssessment }) => {
  const [isAssessing, setIsAssessing] = useState(false);
  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({});
  const [assessmentProgress, setAssessmentProgress] = useState(0);
  
  // Mock assessment result
  const [assessmentResult, setAssessmentResult] = useState<VulnerabilityAssessmentResult | null>(null);
  
  const handleRunAssessment = async () => {
    if (onRunAssessment) {
      onRunAssessment();
    }
    
    setIsAssessing(true);
    setAssessmentProgress(0);
    
    // Simulate assessment progress
    const interval = setInterval(() => {
      setAssessmentProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          return 100;
        }
        return prev + 5;
      });
    }, 300);
    
    // Generate mock results after a delay
    setTimeout(() => {
      clearInterval(interval);
      setAssessmentProgress(100);
      
      // Generate mock assessment result
      setAssessmentResult({
        cameraId: camera.id,
        overallRisk: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)] as 'low' | 'medium' | 'high' | 'critical',
        lastChecked: new Date(),
        findings: [
          {
            category: 'Authentication',
            details: 'Default credentials in use (admin/admin)',
            severity: 'high',
            recommendation: 'Change default password to a strong, unique password.'
          },
          {
            category: 'Firmware',
            details: 'Running outdated firmware version (v1.2.3)',
            severity: 'medium',
            recommendation: 'Update to the latest firmware version.'
          },
          {
            category: 'Network',
            details: 'RTSP stream accessible without authentication',
            severity: 'critical',
            recommendation: 'Enable authentication for all video streams.'
          },
          {
            category: 'Encryption',
            details: 'Communications not encrypted',
            severity: 'medium',
            recommendation: 'Enable HTTPS and disable HTTP access.'
          },
          {
            category: 'Access Control',
            details: 'No IP filtering configured',
            severity: 'low',
            recommendation: 'Configure IP filtering to restrict access.'
          }
        ]
      });
      
      setIsAssessing(false);
    }, 6000);
  };
  
  const toggleSection = (section: string) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };
  
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-scanner-danger';
      case 'high': return 'bg-red-600';
      case 'medium': return 'bg-scanner-warning';
      case 'low': return 'bg-scanner-info';
      default: return 'bg-gray-500';
    }
  };
  
  const getTotalIssuesByRisk = () => {
    if (!assessmentResult) return { critical: 0, high: 0, medium: 0, low: 0 };
    
    return assessmentResult.findings.reduce((acc, finding) => {
      acc[finding.severity]++;
      return acc;
    }, { critical: 0, high: 0, medium: 0, low: 0 } as Record<string, number>);
  };
  
  const issues = getTotalIssuesByRisk();

  return (
    <Card className="bg-scanner-card border-gray-800 shadow-lg">
      <CardHeader className="pb-2">
        <CardTitle className="text-white flex items-center space-x-2">
          <Shield className="w-5 h-5 text-scanner-primary" />
          <span>Vulnerability Assessment</span>
          {assessmentResult && (
            <Badge className={getSeverityColor(assessmentResult.overallRisk)}>
              {assessmentResult.overallRisk} risk
            </Badge>
          )}
        </CardTitle>
      </CardHeader>
      
      <CardContent>
        {isAssessing ? (
          <div className="space-y-4">
            <div className="bg-gray-800 p-4 rounded-md text-center">
              <h3 className="text-lg mb-2">Running Assessment</h3>
              <p className="text-gray-400 text-sm mb-4">
                Checking for vulnerabilities in {camera.ip}
              </p>
              <Progress value={assessmentProgress} className="h-2 mb-2" />
              <p className="text-xs text-gray-500">{assessmentProgress}%</p>
            </div>
          </div>
        ) : assessmentResult ? (
          <div className="space-y-4">
            <div className="bg-gray-800 p-4 rounded-md">
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div>
                  <h3 className="text-lg mb-1">Assessment Results</h3>
                  <p className="text-xs text-gray-400">
                    Last checked: {assessmentResult.lastChecked.toLocaleString()}
                  </p>
                </div>
                
                <div className="flex items-center gap-3">
                  <div className="text-center">
                    <Badge className="bg-scanner-danger mb-1">{issues.critical}</Badge>
                    <p className="text-xs text-gray-400">Critical</p>
                  </div>
                  <div className="text-center">
                    <Badge className="bg-red-600 mb-1">{issues.high}</Badge>
                    <p className="text-xs text-gray-400">High</p>
                  </div>
                  <div className="text-center">
                    <Badge className="bg-scanner-warning mb-1">{issues.medium}</Badge>
                    <p className="text-xs text-gray-400">Medium</p>
                  </div>
                  <div className="text-center">
                    <Badge className="bg-scanner-info mb-1">{issues.low}</Badge>
                    <p className="text-xs text-gray-400">Low</p>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="space-y-2">
              {assessmentResult.findings.map((finding, index) => (
                <Collapsible 
                  key={index}
                  open={expandedSections[finding.category]}
                  onOpenChange={() => toggleSection(finding.category)}
                  className="border border-gray-800 rounded-md overflow-hidden"
                >
                  <CollapsibleTrigger asChild>
                    <div className="flex items-center justify-between p-3 cursor-pointer hover:bg-gray-800">
                      <div className="flex items-center gap-2">
                        <Badge className={getSeverityColor(finding.severity)}>
                          {finding.severity}
                        </Badge>
                        <div>
                          <h4 className="text-sm font-medium">{finding.category}</h4>
                          <p className="text-xs text-gray-400">{finding.details}</p>
                        </div>
                      </div>
                      {expandedSections[finding.category] ? 
                        <ChevronUp className="h-4 w-4" /> : 
                        <ChevronDown className="h-4 w-4" />
                      }
                    </div>
                  </CollapsibleTrigger>
                  <CollapsibleContent className="px-3 pb-3 pt-1 border-t border-gray-800">
                    <div className="space-y-2">
                      <div>
                        <h5 className="text-xs text-gray-400 mb-1">Recommendation:</h5>
                        <p className="text-sm">{finding.recommendation}</p>
                      </div>
                      
                      <div className="pt-2">
                        <Button variant="outline" size="sm" className="text-xs h-7 px-2">
                          <ExternalLink className="h-3 w-3 mr-1" />
                          View Details
                        </Button>
                      </div>
                    </div>
                  </CollapsibleContent>
                </Collapsible>
              ))}
            </div>
            
            <div className="flex justify-end">
              <Button onClick={handleRunAssessment} disabled={isAssessing} className="bg-scanner-primary hover:bg-blue-600">
                <Play className="h-4 w-4 mr-2" />
                Run Assessment Again
              </Button>
            </div>
          </div>
        ) : (
          <div className="text-center py-8">
            <AlertTriangle className="h-12 w-12 mx-auto mb-4 text-scanner-primary opacity-50" />
            <h3 className="text-lg mb-2">No Assessment Results</h3>
            <p className="text-gray-400 text-sm mb-4 max-w-md mx-auto">
              Run a vulnerability assessment to check for security issues with this camera.
            </p>
            <Button onClick={handleRunAssessment} disabled={isAssessing} className="bg-scanner-primary hover:bg-blue-600">
              <Play className="h-4 w-4 mr-2" />
              Run Assessment
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default VulnerabilityAssessment;
