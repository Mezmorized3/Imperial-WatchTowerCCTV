
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { AlertTriangle, Shield, Search, Download } from 'lucide-react';
import { checkVulnerabilityDatabase } from '@/utils/vulnerabilityUtils';
import { useToast } from '@/components/ui/use-toast';

interface VulnerabilityAssessmentProps {
  // Add any props if needed
}

export const VulnerabilityAssessment: React.FC<VulnerabilityAssessmentProps> = () => {
  const { toast } = useToast();
  const [target, setTarget] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState<any[]>([]);

  const handleScan = async () => {
    if (!target.trim()) {
      toast({
        title: 'Missing Target',
        description: 'Please enter a target IP address or hostname.',
        variant: 'destructive',
      });
      return;
    }

    setIsScanning(true);
    setProgress(0);
    setVulnerabilities([]);
    
    // Simulate progress
    const interval = setInterval(() => {
      setProgress(prev => {
        if (prev >= 95) {
          clearInterval(interval);
          return 95;
        }
        return prev + 3;
      });
    }, 100);

    try {
      const results = await checkVulnerabilityDatabase(target);
      setVulnerabilities(results);
      
      toast({
        title: 'Scan Complete',
        description: `Found ${results.length} vulnerabilities.`,
        variant: results.length > 0 ? 'destructive' : 'default',
      });
    } catch (error) {
      console.error('Error scanning for vulnerabilities:', error);
      toast({
        title: 'Scan Failed',
        description: 'Failed to complete vulnerability scan. Please try again.',
        variant: 'destructive',
      });
    } finally {
      clearInterval(interval);
      setProgress(100);
      setTimeout(() => setIsScanning(false), 500);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'bg-red-500 hover:bg-red-600';
      case 'high': return 'bg-orange-500 hover:bg-orange-600';
      case 'medium': return 'bg-yellow-500 hover:bg-yellow-600';
      case 'low': return 'bg-blue-500 hover:bg-blue-600';
      default: return 'bg-gray-500 hover:bg-gray-600';
    }
  };

  return (
    <div className="grid gap-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center text-xl">
            <Shield className="mr-2 h-6 w-6" />
            Vulnerability Assessment
          </CardTitle>
          <CardDescription>
            Scan devices for known vulnerabilities and security issues
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4">
            <div className="flex flex-col md:flex-row space-y-2 md:space-y-0 gap-2">
              <Input
                placeholder="Enter IP address or hostname"
                value={target}
                onChange={(e) => setTarget(e.target.value)}
                className="flex-1"
              />
              <Button 
                onClick={handleScan} 
                disabled={isScanning}
                className="md:w-1/4"
              >
                <Search className="mr-2 h-4 w-4" />
                Scan Target
              </Button>
            </div>

            {isScanning && (
              <div className="my-2">
                <div className="flex justify-between text-sm mb-1">
                  <span>Scanning for vulnerabilities...</span>
                  <span>{progress}%</span>
                </div>
                <Progress value={progress} className="h-2" />
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {vulnerabilities.length > 0 ? (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <AlertTriangle className="mr-2 h-5 w-5 text-red-500" />
              Vulnerabilities Found ({vulnerabilities.length})
            </CardTitle>
            <CardDescription>
              Target: {target}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>CVE ID</TableHead>
                  <TableHead>Severity</TableHead>
                  <TableHead className="hidden md:table-cell">Affected Models</TableHead>
                  <TableHead>Description</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {vulnerabilities.map((vuln, index) => (
                  <TableRow key={index}>
                    <TableCell className="font-mono">{vuln.cveid}</TableCell>
                    <TableCell>
                      <Badge className={getSeverityColor(vuln.severity)}>
                        {vuln.severity}
                      </Badge>
                    </TableCell>
                    <TableCell className="hidden md:table-cell">
                      {vuln.affectedModels.slice(0, 2).join(', ')}
                      {vuln.affectedModels.length > 2 && '...'}
                    </TableCell>
                    <TableCell className="max-w-md truncate">
                      {vuln.description}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
          <CardFooter className="justify-between">
            <div className="text-sm text-gray-500">
              Powered by Imperial Shield Vulnerability Database
            </div>
            <Button variant="outline" size="sm">
              <Download className="mr-2 h-4 w-4" />
              Export Report
            </Button>
          </CardFooter>
        </Card>
      ) : progress === 100 && !isScanning && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Shield className="mr-2 h-5 w-5 text-green-500" />
              Scan Results
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="p-8 text-center">
              <Shield className="h-16 w-16 mx-auto mb-4 text-green-500" />
              <h3 className="text-lg font-medium mb-2">No Vulnerabilities Found</h3>
              <p className="text-gray-500">
                The target appears to be secure. No known vulnerabilities were detected.
              </p>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default VulnerabilityAssessment;
