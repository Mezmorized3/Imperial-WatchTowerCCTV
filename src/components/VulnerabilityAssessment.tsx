
import React, { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Progress } from '@/components/ui/progress';
import { Shield, AlertTriangle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { checkVulnerabilityDatabase } from '@/utils/vulnerabilityUtils';

const VulnerabilityAssessment = () => {
  const [target, setTarget] = useState('');
  const [scanning, setScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState<any[]>([]);
  const { toast } = useToast();

  const handleScan = async () => {
    if (!target) {
      toast({
        title: "Error",
        description: "Please enter a target IP or hostname",
        variant: "destructive"
      });
      return;
    }

    setScanning(true);
    setScanProgress(0);
    setVulnerabilities([]);

    toast({
      title: "Scan Started",
      description: `Scanning ${target} for vulnerabilities...`
    });

    try {
      // Simulate progress
      const progressInterval = setInterval(() => {
        setScanProgress(prev => {
          if (prev >= 95) {
            clearInterval(progressInterval);
            return 95;
          }
          return prev + 5;
        });
      }, 200);

      // In a real implementation, we would use one of the GitHub tools here
      // For now, we'll use our utility that will be replaced with real implementation
      const results = await checkVulnerabilityDatabase(target);
      
      clearInterval(progressInterval);
      setScanProgress(100);
      setVulnerabilities(results);
      
      toast({
        title: "Scan Complete",
        description: `Found ${results.length} potential vulnerabilities`
      });
    } catch (error) {
      toast({
        title: "Scan Failed",
        description: error instanceof Error ? error.message : "Unknown error occurred",
        variant: "destructive"
      });
    } finally {
      setScanning(false);
    }
  };

  return (
    <Card className="bg-scanner-dark-alt border-gray-700">
      <CardContent className="pt-6">
        <div className="space-y-6">
          <h2 className="text-xl font-bold flex items-center">
            <AlertTriangle className="mr-2 text-yellow-500" />
            Vulnerability Assessment
          </h2>
          <p className="text-gray-400">
            Scan surveillance systems for known vulnerabilities and security issues
          </p>
          
          <div className="flex flex-col md:flex-row gap-4">
            <Input
              placeholder="Enter IP address or hostname"
              value={target}
              onChange={(e) => setTarget(e.target.value)}
              className="bg-scanner-dark border-gray-700"
            />
            <Button 
              onClick={handleScan} 
              disabled={scanning}
              className="whitespace-nowrap"
            >
              {scanning ? "Scanning..." : "Scan Target"}
            </Button>
          </div>
          
          {scanning && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Scanning {target}</span>
                <span>{scanProgress}%</span>
              </div>
              <Progress value={scanProgress} className="w-full" />
            </div>
          )}
          
          {vulnerabilities.length > 0 && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Detected Vulnerabilities</h3>
              <div className="space-y-2">
                {vulnerabilities.map((vuln, index) => (
                  <div 
                    key={index} 
                    className="p-4 bg-scanner-dark rounded-md border border-gray-700"
                  >
                    <div className="flex justify-between items-start">
                      <div>
                        <h4 className="font-medium">{vuln.cveid}</h4>
                        <p className="text-sm text-gray-400 mt-1">{vuln.description}</p>
                      </div>
                      <div className={`px-2 py-1 rounded text-xs ${
                        vuln.severity === 'Critical' ? 'bg-red-900/50 text-red-300' :
                        vuln.severity === 'High' ? 'bg-orange-900/50 text-orange-300' :
                        vuln.severity === 'Medium' ? 'bg-yellow-900/50 text-yellow-300' :
                        'bg-blue-900/50 text-blue-300'
                      }`}>
                        {vuln.severity}
                      </div>
                    </div>
                    {vuln.affectedModels && (
                      <div className="mt-2 pt-2 border-t border-gray-700">
                        <p className="text-xs text-gray-400">Affected Models:</p>
                        <p className="text-xs">{vuln.affectedModels.join(', ')}</p>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityAssessment;
