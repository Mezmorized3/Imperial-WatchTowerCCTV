
import React, { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Slider } from '@/components/ui/slider';
import { AlertTriangle, Search, Server, Shield } from 'lucide-react';
import { executeBotExploits } from '@/utils/osintTools';
import { useToast } from '@/hooks/use-toast';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';

export const BotExploitsTool: React.FC = () => {
  const [target, setTarget] = useState('');
  const [scanType, setScanType] = useState<'passive' | 'active'>('passive');
  const [timeout, setTimeout] = useState(10);
  const [isScanning, setIsScanning] = useState(false);
  const [results, setResults] = useState<any>(null);
  const { toast } = useToast();

  const handleScan = async () => {
    if (!target) {
      toast({
        title: "Target Required",
        description: "Please enter an IP address or subnet to scan",
        variant: "destructive"
      });
      return;
    }
    
    // Basic IP/subnet validation
    const ipRegex = /^(\d{1,3}\.){3}\d{1,3}(\/\d{1,2})?$/;
    if (!ipRegex.test(target)) {
      toast({
        title: "Invalid Target",
        description: "Please enter a valid IP address or subnet (e.g., 192.168.1.1 or 192.168.1.0/24)",
        variant: "destructive"
      });
      return;
    }
    
    setIsScanning(true);
    toast({
      title: "BotExploits Scan Initiated",
      description: `Scanning ${target} for IoT devices...`,
    });
    
    try {
      const scanResults = await executeBotExploits({
        target,
        scanType,
        timeout,
        ports: [21, 22, 23, 80, 443, 554, 1883, 8080, 8443, 8554]
      });
      
      setResults(scanResults);
      toast({
        title: "Scan Complete",
        description: scanResults?.simulatedData 
          ? "Showing simulated results (dev mode)" 
          : `Found ${scanResults?.devicesFound || 0} IoT devices`,
      });
    } catch (error) {
      console.error('BotExploits scan error:', error);
      toast({
        title: "Scan Failed",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    } finally {
      setIsScanning(false);
    }
  };

  return (
    <div className="space-y-4">
      <Card className="bg-scanner-dark border border-red-900">
        <CardContent className="pt-4 pb-3">
          <div className="flex items-start space-x-2">
            <AlertTriangle className="h-5 w-5 text-red-500 flex-shrink-0 mt-0.5" />
            <div className="text-sm text-red-200">
              <p className="font-medium">Warning: Powerful Tool</p>
              <p className="text-red-300/80">
                BotExploits can discover and potentially exploit IoT devices. Only use on networks you are authorized to scan. Using this tool against unauthorized targets is illegal.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="md:col-span-2">
          <Input
            placeholder="Enter IP or subnet (e.g., 192.168.1.1 or 192.168.1.0/24)"
            value={target}
            onChange={(e) => setTarget(e.target.value)}
            className="bg-scanner-dark"
          />
        </div>
        <div>
          <Button 
            onClick={handleScan} 
            disabled={isScanning || !target}
            className="w-full"
            variant="destructive"
          >
            {isScanning ? (
              <>Scanning...</>
            ) : (
              <>
                <Search className="mr-2 h-4 w-4" />
                Scan IoT Devices
              </>
            )}
          </Button>
        </div>
      </div>
      
      <Card className="bg-scanner-dark-alt border-gray-700">
        <CardContent className="pt-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="scan-type" className="text-sm">Active Scanning</Label>
                <Switch 
                  id="scan-type" 
                  checked={scanType === 'active'}
                  onCheckedChange={(checked) => setScanType(checked ? 'active' : 'passive')}
                />
              </div>
              <p className="text-xs text-gray-400">
                {scanType === 'active' 
                  ? 'Active scanning attempts connections to devices (more detectable)' 
                  : 'Passive scanning only listens for device broadcasts (stealthier)'}
              </p>
            </div>
            
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="timeout-slider">Timeout: {timeout}s</Label>
              </div>
              <Slider 
                id="timeout-slider"
                min={5} 
                max={30} 
                step={1} 
                value={[timeout]} 
                onValueChange={(value) => setTimeout(value[0])}
              />
              <p className="text-xs text-gray-400">Maximum time to wait for each device</p>
            </div>
          </div>
        </CardContent>
      </Card>
      
      {results && results.devices && (
        <Card className="bg-scanner-dark-alt border-gray-700">
          <CardContent className="pt-4">
            <div className="text-sm text-gray-400 mb-2">
              {results.devicesFound > 0 
                ? `Found ${results.devicesFound} IoT device${results.devicesFound > 1 ? 's' : ''} on ${results.target}` 
                : `No IoT devices found on ${results.target}`}
            </div>
            
            {results.devices.length > 0 ? (
              <ScrollArea className="h-[350px]">
                <div className="space-y-4">
                  {results.devices.map((device: any, index: number) => (
                    <div key={index} className="p-3 bg-scanner-dark rounded-md border border-gray-700">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center">
                          <Server className="h-5 w-5 text-blue-500 mr-2" />
                          <span className="font-medium text-blue-300">{device.ip}</span>
                        </div>
                        <Badge className="bg-blue-900">
                          {device.type}
                        </Badge>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                        <div>
                          <p><span className="text-gray-400">Manufacturer:</span> {device.manufacturer}</p>
                          <p>
                            <span className="text-gray-400">Open Ports:</span> {' '}
                            {device.ports?.length > 0 
                              ? device.ports.join(', ') 
                              : 'None detected'}
                          </p>
                        </div>
                        
                        {device.vulnerabilities && device.vulnerabilities.length > 0 && (
                          <div>
                            <p className="text-yellow-400 font-medium">Vulnerabilities:</p>
                            <div className="space-y-1 mt-1">
                              {device.vulnerabilities.map((vuln: any, i: number) => (
                                <div key={i} className="flex items-center">
                                  <Shield className="h-3 w-3 text-red-500 mr-1" />
                                  <span>{vuln.name}</span>
                                  <Badge className={`ml-2 ${
                                    vuln.severity === 'high' ? 'bg-red-600' : 
                                    vuln.severity === 'medium' ? 'bg-yellow-600' : 'bg-blue-600'
                                  } text-xs`}>
                                    {vuln.severity}
                                  </Badge>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </ScrollArea>
            ) : (
              <div className="text-center py-8 text-gray-400">
                <Server className="h-12 w-12 mx-auto mb-2" />
                <p>No IoT devices discovered in the target range</p>
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
};
