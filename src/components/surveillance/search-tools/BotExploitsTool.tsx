import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { toast } from '@/components/ui/use-toast';
import { executeBotExploits } from '@/utils/osintUtilsConnector';

const BotExploitsTool: React.FC = () => {
  const [target, setTarget] = useState('');
  const [botType, setBotType] = useState('telegram');
  const [outputFormat, setOutputFormat] = useState('json');
  const [verboseOutput, setVerboseOutput] = useState(true);
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<any>(null);

  const handleExecute = async () => {
    if (!target) {
      toast({
        title: "Error",
        description: "Please enter a target bot ID or URL",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);

    try {
      const result = await executeBotExploits({
        target,
        botType,
        outputFormat,
        verbose: verboseOutput
      });

      if (result.success) {
        setResults(result.data);
        toast({
          title: "Scan Complete",
          description: `Found ${result.data.tokens?.length || 0} tokens and ${result.data.apis?.length || 0} APIs`
        });
      } else {
        toast({
          title: "Error",
          description: result.error || "Failed to execute bot exploits",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Bot Exploits error:", error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="border-gray-700 bg-scanner-dark-alt">
      <CardHeader>
        <CardTitle>Bot Exploits Tool</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div>
            <Label htmlFor="target">Target Bot ID or URL</Label>
            <Input
              id="target"
              placeholder="Enter bot ID or URL"
              value={target}
              onChange={(e) => setTarget(e.target.value)}
              className="bg-scanner-dark border-gray-700"
            />
          </div>

          <div>
            <Label htmlFor="botType">Bot Type</Label>
            <Select value={botType} onValueChange={setBotType}>
              <SelectTrigger className="bg-scanner-dark border-gray-700">
                <SelectValue placeholder="Select bot type" />
              </SelectTrigger>
              <SelectContent className="bg-scanner-dark border-gray-700">
                <SelectItem value="telegram">Telegram</SelectItem>
                <SelectItem value="discord">Discord</SelectItem>
                <SelectItem value="slack">Slack</SelectItem>
                <SelectItem value="any">Any</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div>
            <Label htmlFor="outputFormat">Output Format</Label>
            <Select value={outputFormat} onValueChange={setOutputFormat}>
              <SelectTrigger className="bg-scanner-dark border-gray-700">
                <SelectValue placeholder="Select output format" />
              </SelectTrigger>
              <SelectContent className="bg-scanner-dark border-gray-700">
                <SelectItem value="json">JSON</SelectItem>
                <SelectItem value="text">Text</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="flex items-center space-x-2">
            <Checkbox
              id="verboseOutput"
              checked={verboseOutput}
              onCheckedChange={(checked) => setVerboseOutput(checked === true)}
            />
            <Label htmlFor="verboseOutput">Verbose Output</Label>
          </div>

          <Button onClick={handleExecute} disabled={isLoading} className="w-full">
            {isLoading ? "Executing..." : "Execute"}
          </Button>

          {results && (
            <div>
              <Label>Results</Label>
              <Textarea
                readOnly
                value={JSON.stringify(results, null, 2)}
                className="bg-scanner-dark border-gray-700 h-40"
              />
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default BotExploitsTool;
