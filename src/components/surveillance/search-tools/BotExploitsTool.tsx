import React, { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Bot, Search, Shield, Server } from 'lucide-react';
import { executeBotExploits } from '@/utils/osintTools';
import { useToast } from '@/hooks/use-toast';

export const BotExploitsTool: React.FC = () => {
  const [ip, setIp] = useState('');
  const [scanType, setScanType] = useState('standard');
  const [timeout, setTimeout] = useState('30');
  const [isScanning, setIsScanning] = useState(false);
  const [results, setResults] = useState<any>(null);
  const [deviceCount, setDeviceCount] = useState(0);
  const { toast } = useToast();

  const handleScan = async () => {
    if (!ip) {
      toast({
        title: "IP Address Required",
        description: "Please enter an IP address to scan",
        variant: "destructive"
      });
      return;
    }
    
    setIsScanning(true);
    toast({
      title: "IoT Device Scan Initiated",
      description: `Scanning ${ip}...`,
    });
    
    try {
      const formattedIP = ip.trim();
      const scanResults = await executeBotExploits({
        target: formattedIP,
        attackType: scanType,
        timeout: Number(timeout)
      });
      
      setResults(scanResults);
      toast({
        title: "Scan Complete",
        description: scanResults?.simulatedData 
          ? "Showing simulated results (dev mode)" 
          : "IoT device scan completed successfully",
      });

      // Update the device count reference to use the correct property
      if (scanResults?.data?.devices?.length) {
        setDeviceCount(scanResults.data.devices.length);
      }
    } catch (error) {
      console.error('IoT device scan error:', error);
      toast({
        title: "Scan Failed",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    } finally {
      setIsScanning(false);
    }
  };

  return (
    <div className="space-y-4">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="md:col-span-2">
          <Input
            placeholder="Enter IP address to scan (e.g., 192.168.1.1)"
            value={ip}
            onChange={(e) => setIp(e.target.value)}
            className="bg-scanner-dark"
          />
        </div>
        <div>
          <Button 
            onClick={handleScan} 
            disabled={isScanning || !ip}
            className="w-full"
          >
            {isScanning ? (
              <>Scanning...</>
            ) : (
              <>
                <Search className="mr-2 h-4 w-4" />
                Scan IoT Device
              </>
            )}
          </Button>
        </div>
      </div>
      
      <Card className="bg-scanner-dark-alt border-gray-700">
        <CardContent className="pt-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <Label className="text-sm text-gray-400">Scan Type</Label>
              <div className="mt-1">
                <Tabs value={scanType} onValueChange={setScanType} className="w-full">
                  <TabsList className="w-full">
                    <TabsTrigger value="standard" className="flex-1">Standard</TabsTrigger>
                    <TabsTrigger value="aggressive" className="flex-1">Aggressive</TabsTrigger>
                  </TabsList>
                </Tabs>
              </div>
            </div>
            
            <div>
              <Label htmlFor="timeout" className="text-sm text-gray-400">Timeout (seconds)</Label>
              <Input
                type="number"
                id="timeout"
                value={timeout}
                onChange={(e) => setTimeout(e.target.value)}
                className="bg-scanner-dark"
              />
            </div>
          </div>
        </CardContent>
      </Card>
      
      {results && (
        <Card className="bg-scanner-dark-alt border-gray-700">
          <CardContent className="pt-4">
            {results.devices && results.devices.length > 0 ? (
              <div className="space-y-4">
                <h3 className="text-lg font-medium">
                  Found {deviceCount} IoT Devices
                </h3>
                {results.devices.map((device: any, index: number) => (
                  <div key={index} className="p-3 bg-scanner-dark rounded-md border border-gray-700">
                    <div className="flex items-start justify-between">
                      <div>
                        <h4 className="font-medium">{device.type}</h4>
                        <p className="text-sm text-gray-400">
                          IP: {device.ip}, Port: {device.port}
                        </p>
                        <p className="text-sm text-gray-400">
                          Manufacturer: {device.manufacturer}, Model: {device.model}
                        </p>
                        <p className="text-sm text-gray-400">
                          Firmware: {device.firmware}
                        </p>
                      </div>
                      <Shield className="h-6 w-6 text-blue-500" />
                    </div>
                    
                    {device.vulnerabilities && device.vulnerabilities.length > 0 && (
                      <div className="mt-2">
                        <h5 className="font-medium">Vulnerabilities:</h5>
                        <ul className="list-disc pl-5 text-sm text-gray-400">
                          {device.vulnerabilities.map((vuln: any, i: number) => (
                            <li key={i}>
                              {vuln.type} ({vuln.severity}) - Exploitable: {vuln.exploitable ? 'Yes' : 'No'}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-gray-400">
                <Bot className="h-12 w-12 mx-auto mb-2" />
                <p>No IoT devices detected</p>
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
};
