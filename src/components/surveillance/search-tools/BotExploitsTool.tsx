
// @ts-nocheck // TODO: FIX TYPES
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Zap, ListChecks, Key, AlertTriangle, Loader2, Bot } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { executeBotExploits } from '@/utils/osintImplementations/hackCCTVTools'; // Assuming this is where it's homed
import { BotExploitsParams, BotExploitsResult, BotExploitsData } from '@/utils/types/osintToolTypes'; // Ensure these types exist and are correct


const BotExploitsTool: React.FC = () => {
  const [targetUrl, setTargetUrl] = useState('');
  const [botType, setBotType] = useState(''); // e.g., 'telegram', 'discord', specific bot name
  const [customPayload, setCustomPayload] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<BotExploitsData | null>(null);
  const { toast } = useToast();

  const handleExploit = async () => {
    if (!targetUrl) {
      toast({ title: 'Error', description: 'Target URL/Endpoint is required.', variant: 'destructive' });
      return;
    }
    setIsLoading(true);
    setResults(null);

    const params: BotExploitsParams = {
      target_url: targetUrl,
      bot_type: botType || undefined,
      custom_payload: customPayload || undefined,
      exploit_action: 'scan_vulnerabilities', // Default or make selectable
    };

    try {
      const response: BotExploitsResult = await executeBotExploits(params);
      if (response.success) {
        setResults(response.data);
        toast({
          title: 'Exploit Scan Complete',
          description: response.data.message || 'Bot exploit scan finished.',
        });
      } else {
        toast({
          title: 'Exploit Scan Failed',
          description: response.error || 'Unknown error during exploit scan.',
          variant: 'destructive',
        });
      }
    } catch (error) {
      console.error('Bot Exploit error:', error);
      toast({
        title: 'Exploit Scan Error',
        description: error instanceof Error ? error.message : 'An unexpected error occurred.',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="w-full shadow-lg border-gray-700 bg-scanner-card">
      <CardHeader>
        <CardTitle className="flex items-center">
          <Bot className="mr-2 h-5 w-5 text-purple-400" />
          Bot Exploits & Vulnerabilities
        </CardTitle>
        <CardDescription>
          Test bots (e.g., Telegram, Discord) for known vulnerabilities or attempt custom exploits.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div>
          <Label htmlFor="target-url">Target Bot URL / API Endpoint</Label>
          <Input id="target-url" placeholder="e.g., https://api.telegram.org/botTOKEN/" value={targetUrl} onChange={(e) => setTargetUrl(e.target.value)} className="bg-scanner-dark-alt border-gray-600" />
        </div>
        <div>
          <Label htmlFor="bot-type">Bot Type/Name (Optional)</Label>
          <Input id="bot-type" placeholder="e.g., MyAwesomeBot, telegram, discord_webhook" value={botType} onChange={(e) => setBotType(e.target.value)} className="bg-scanner-dark-alt border-gray-600" />
        </div>
        <div>
          <Label htmlFor="custom-payload">Custom Payload (Optional)</Label>
          <Textarea
            id="custom-payload"
            placeholder="Enter custom payload specific to the bot or vulnerability..."
            value={customPayload}
            onChange={(e) => setCustomPayload(e.target.value)}
            className="min-h-[100px] bg-scanner-dark-alt border-gray-600 font-mono text-sm"
          />
        </div>
        <Button onClick={handleExploit} disabled={isLoading || !targetUrl} className="w-full bg-purple-600 hover:bg-purple-700">
          {isLoading ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Zap className="mr-2 h-4 w-4" />
          )}
          Scan for Bot Vulnerabilities
        </Button>
      </CardContent>

      {results && (
        <CardFooter className="flex flex-col items-start space-y-4 mt-4 border-t border-gray-700 pt-4">
          <h3 className="text-lg font-semibold text-gray-200">Scan Results</h3>
          {results.message && <p className="text-gray-300">{results.message}</p>}
          
          {results.tokens && results.tokens.length > 0 && (
            <div className="w-full mt-2">
              <h4 className="font-medium text-gray-300">Exposed Tokens/Secrets:</h4>
              <ul className="list-disc list-inside pl-4 space-y-1 text-sm">
                {results.tokens.map(token => (
                  <li key={token.id} className="text-yellow-400">
                    <span className="font-semibold">Type:</span> {token.type} - <span className="font-semibold">Value:</span> <code className="bg-gray-700 p-1 rounded text-xs">{token.value}</code> - <span className="font-semibold">Expires:</span> {token.expiration || 'N/A'}
                  </li>
                ))}
              </ul>
            </div>
          )}

          {results.apis && results.apis.length > 0 && (
            <div className="w-full mt-2">
              <h4 className="font-medium text-gray-300">Identified API Endpoints:</h4>
              <ul className="list-disc list-inside pl-4 space-y-1 text-sm">
                {results.apis.map(api => (
                  <li key={api.id} className="text-blue-400">
                    <span className="font-semibold">{api.method}</span> {api.endpoint} - <span className="font-semibold">Auth Required:</span> {api.authentication ? 'Yes' : 'No'}
                  </li>
                ))}
              </ul>
            </div>
          )}
          
          {(!results.tokens || results.tokens.length === 0) && (!results.apis || results.apis.length === 0) && (
             <p className="text-gray-400">No specific vulnerabilities or information leakage detected from this scan.</p>
          )}
        </CardFooter>
      )}
    </Card>
  );
};

export default BotExploitsTool;
