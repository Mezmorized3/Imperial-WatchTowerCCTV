import React, { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { ShieldQuestion, Search } from 'lucide-react';
import { executeBotExploits } from '@/utils/osintUtilsConnector';

interface BotExploitsOptions {
  target: string;
  botType: 'telegram' | 'discord' | 'slack' | 'any';
  scanType: 'keys' | 'tokens' | 'all';
  timeout?: number;
}

const BotExploitsTool: React.FC = () => {
  const [url, setUrl] = useState('');
  const [selectedBotType, setSelectedBotType] = useState('telegram');
  const [scanType, setScanType] = useState('keys');
  const [results, setResults] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleSearch = async () => {
    if (!url) {
      toast({
        title: "Error",
        description: "Please enter a target URL or identifier",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);
    setResults(null);

    try {
      const result = await executeBotExploits({
        target: url,
        botType: selectedBotType as 'telegram' | 'discord' | 'slack' | 'any',
        scanType: scanType as 'keys' | 'tokens' | 'all'
      });
      
      if (result && result.success) {
        setResults(result);
        toast({
          title: "Scan Complete",
          description: `Found ${result.data.tokens.length} potential bot ${result.data.tokens.length === 1 ? 'token' : 'tokens'}.`
        });
      } else {
        toast({
          title: "Scan Failed",
          description: "An error occurred during the scan",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Error during bot exploits scan:", error);
      toast({
        title: "Scan Error",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="w-full shadow-md">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <ShieldQuestion className="h-5 w-5" />
          Bot Exploits Scanner
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="url">Target URL/Identifier</Label>
            <Input
              id="url"
              placeholder="Enter target URL or identifier"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              disabled={isLoading}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="botType">Bot Type</Label>
            <Select
              value={selectedBotType}
              onValueChange={(value) => setSelectedBotType(value)}
              disabled={isLoading}
            >
              <SelectTrigger id="botType">
                <SelectValue placeholder="Select bot type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="telegram">Telegram</SelectItem>
                <SelectItem value="discord">Discord</SelectItem>
                <SelectItem value="slack">Slack</SelectItem>
                <SelectItem value="any">Any</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="scanType">Scan Type</Label>
            <Select
              value={scanType}
              onValueChange={(value) => setScanType(value)}
              disabled={isLoading}
            >
              <SelectTrigger id="scanType">
                <SelectValue placeholder="Select scan type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="keys">Keys</SelectItem>
                <SelectItem value="tokens">Tokens</SelectItem>
                <SelectItem value="all">All</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <Button
            className="w-full"
            onClick={handleSearch}
            disabled={isLoading || !url}
          >
            {isLoading ? (
              <>
                <Search className="mr-2 h-4 w-4 animate-spin" />
                Searching...
              </>
            ) : (
              <>
                <Search className="mr-2 h-4 w-4" />
                Start Scan
              </>
            )}
          </Button>

          {results && (
            <div className="mt-6 space-y-3">
              <h3 className="text-lg font-semibold">Scan Results</h3>
              <pre className="min-h-32 font-mono text-sm bg-scanner-dark-alt border-gray-700 p-2 rounded-md">
                {JSON.stringify(results, null, 2)}
              </pre>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default BotExploitsTool;
