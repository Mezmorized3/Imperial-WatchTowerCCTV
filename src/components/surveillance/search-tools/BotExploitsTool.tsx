import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Bot, Search } from 'lucide-react';
import { toast } from '@/components/ui/use-toast';
import { executeBotExploits } from '@/utils/osintTools';
import { BotExploitsParams } from '@/utils/types/networkToolTypes';

interface BotExploitsToolProps {
  onScanComplete?: (results: any) => void;
}

const BotExploitsTool = () => {
  const [target, setTarget] = useState('');
  const [selectedBotType, setSelectedBotType] = useState('any');
  const [selectedScanType, setSelectedScanType] = useState('all');
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<any>(null);
  
  const handleScan = async () => {
    if (!target) {
      toast({
        title: "Error",
        description: "Please enter a target",
        variant: "destructive"
      });
      return;
    }
    
    setIsLoading(true);
    
    try {
      const result = await executeBotExploits({
        target,
        botType: selectedBotType as 'telegram' | 'discord' | 'slack' | 'any',
        scanType: selectedScanType as 'keys' | 'tokens' | 'all',
        timeout: 30000
      });
      
      if (result && result.success) {
        setResults(result.data);
        toast({
          title: "Scan Complete",
          description: `Found ${result.found || 0} potential bot tokens/keys.`
        });
      } else {
        toast({
          title: "Scan Failed",
          description: result?.error || "Unknown error occurred",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Error during scan:", error);
      toast({
        title: "Scan Error",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="border-gray-700 bg-scanner-dark shadow-lg">
      <CardHeader>
        <CardTitle className="flex items-center">
          <Bot className="h-5 w-5 text-scanner-success mr-2" />
          Bot Exploits
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <Label htmlFor="target">Target</Label>
          <Input
            id="target"
            placeholder="Enter target IP or domain"
            value={target}
            onChange={(e) => setTarget(e.target.value)}
            className="bg-scanner-dark-alt border-gray-700"
          />
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label htmlFor="bot-type">Bot Type</Label>
            <Select value={selectedBotType} onValueChange={setSelectedBotType}>
              <SelectTrigger id="bot-type" className="bg-scanner-dark-alt border-gray-700">
                <SelectValue placeholder="Select bot type" />
              </SelectTrigger>
              <SelectContent className="bg-scanner-dark border-gray-700">
                <SelectItem value="any">Any</SelectItem>
                <SelectItem value="telegram">Telegram</SelectItem>
                <SelectItem value="discord">Discord</SelectItem>
                <SelectItem value="slack">Slack</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div>
            <Label htmlFor="scan-type">Scan Type</Label>
            <Select value={selectedScanType} onValueChange={setSelectedScanType}>
              <SelectTrigger id="scan-type" className="bg-scanner-dark-alt border-gray-700">
                <SelectValue placeholder="Select scan type" />
              </SelectTrigger>
              <SelectContent className="bg-scanner-dark border-gray-700">
                <SelectItem value="all">All</SelectItem>
                <SelectItem value="keys">Keys</SelectItem>
                <SelectItem value="tokens">Tokens</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
        
        <Button
          onClick={handleScan}
          disabled={isLoading}
          variant="default"
          className="bg-scanner-primary"
        >
          <Search className="h-4 w-4 mr-2" />
          {isLoading ? "Scanning..." : "Start Scan"}
        </Button>
        
        {results && (
          <div className="mt-4">
            <h3 className="text-sm font-semibold mb-2">Results:</h3>
            <pre className="text-xs text-gray-400 bg-scanner-dark-alt border border-gray-700 rounded-md p-2">
              {JSON.stringify(results, null, 2)}
            </pre>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default BotExploitsTool;
